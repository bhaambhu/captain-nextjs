// Prisma Schema File: learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models for Job Portal
model LabelledDate {
  id    Int      @id @default(autoincrement())
  label String?
  date  DateTime
  job   Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId Int
}

model LabelledLink {
  id    Int     @id @default(autoincrement())
  label String?
  link  String
  job   Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId Int
}

model DeptVacancy {
  id         Int     @id @default(autoincrement())
  department String?
  posts      Int
  job        Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      Int
}

model Job {
  id            Int            @id @default(autoincrement())
  adv           Advertisement  @relation(fields: [advId], references: [id], onDelete: Cascade)
  advId         Int
  nameOfPost    String
  impDates      LabelledDate[]
  lastDate      DateTime?
  lastDateLabel String?
  vacancies     DeptVacancy[]
  impLinks      LabelledLink[]
  qualification String?
  experience    String?
  createdAt     DateTime       @default(now())
}

model Advertisement {
  id           Int     @id @default(autoincrement())
  advNo        String?
  organization String?
  location     String?
  jobs         Job[]
}

// A subject is a set of topics and subjects come underneath other subject to form a Tree structure
model Subject {
  id Int @id @default(autoincrement())
  name String?
  parent Subject? @relation("ParentChildSubjects", fields: [parentId], references: [id])
  parentId Int?
  children Subject[] @relation("ParentChildSubjects")
  about String?
  topics Topic[]
  // There should also be a slug field - for meaningful URLs and SEO
  // Add a "delete" method - when a subject is deleted, all its children should become the children of this subject's parent. Also move all its topics to parent subject
  // Add a breadcrumbs field - which returns {id, name} of all ancestors in order.
}

model Topic {
  id Int @id @default(autoincrement())
  title String?
  about String?
  subject Subject? @relation(fields: [subjectId], references: [id])
  subjectId Int?
  // topicDatas TopicData[]
  steps Json? @default("[]")
  assessor Json? @default("{}")
  published Boolean @default(false)
  paths PathTopicSequence[]
  requires TopicRequirements[] @relation("requiredBy")
  requiredBy TopicRequirements[] @relation("requires")
  // Add a slug field for meaningful URLs and SEO
  // Add a breadcrumbs field - which returns {id, name} of all ancestors in order.
}

// model TopicData {
//   id Int @id @default(autoincrement())
//   topic Topic @relation(fields: [topicId], references: [id])
//   topicId Int
//   steps Json?
//   assessor Json?
//    // Auto incremented with a topic is edited in UI (a new topic entry is created in database)
//   version Int
//   prevVersion TopicData? @relation("TopicHistory", fields: [prevVersionId], references: [id])
//   prevVersionId Int? @unique
//   nextVersion TopicData? @relation("TopicHistory")
//   topicDataState TopicDataState @default(UPCOMING)
//   // Add an author field - which shows the user who put this data.
//   updatedAt DateTime @updatedAt
// }

// How a topic works is, topic info is never deleted, ever topic edit is actually a new topic create, to preserve all knowledge and prevent sabotaging. Whenever a topic is edited in UI, a new topic is created with version incremented and previousID pointed to ID of previous topic data. This way we can preserve topics, use history, etc.
enum TopicDataState {
  // The topic which is published and ready to consume
  CURRENT
  // The topic which has been superceded by a new version and so is not published
  OBSOLETE
  // The newest version, which is currently under construction and so it won't be loaded online.
  UPCOMING
}

model Path {
  id Int @id @default(autoincrement())
  // Add a slug field for meaningful URLs and SEO
  title String?
  about String?
  published Boolean @default(false)
  topics PathTopicSequence[]
}

model TopicRequirements {
  requiredBy Topic @relation("requiredBy", fields: [requiredById], references: [id], onDelete: Cascade)
  requiredById Int
  requires Topic @relation("requires", fields: [requiresId], references: [id], onDelete: Cascade)
  requiresId Int

  @@id([requiredById, requiresId])
}

model PathTopicSequence {
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId Int
  path Path @relation(fields: [pathId], references: [id], onDelete: Cascade)
  pathId Int
  order Int
  @@id([pathId, topicId])
}